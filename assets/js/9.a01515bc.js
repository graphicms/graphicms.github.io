(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{164:function(e,t,o){"use strict";o.r(t);var s=o(0),n=Object(s.a)({},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"content"},[t("p",[this._v("The package makes use of "),t("a",{attrs:{href:"https://github.com/spatie/typed",target:"_blank",rel:"noopener noreferrer"}},[this._v("spatie/typed"),t("OutboundLink")],1),this._v(" package to make sure "),t("code",[this._v("$attributes")]),this._v(" variable gets the right parameters and types (so you cannot pass a boolean where the system expects an array and so on).")]),this._v(" "),this._m(0)])},[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("If you do not provide a typeNames option, GraphiCMS will follow to following convention to register derived types from you type: "),o("code",[e._v("${typeName}Type")]),e._v(", "),o("code",[e._v("${typeName}Union")]),e._v(", "),o("code",[e._v("${typeName}Collection.")]),e._v(" If you register the type "),o("code",[e._v("User")]),e._v(", the following GraphQL types will be registered: "),o("code",[e._v("UserType, UserUnion, UserCollection")]),e._v(".")])}],!1,null,null,null);t.default=n.exports}}]);